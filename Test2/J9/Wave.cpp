// $Id: Wave.cpp 2832 2009-05-18 06:52:23Z hyojin.lee $

#include "Stdafx.h"
#include "Wave.h"

#include "UtilityMath.h"
#include "Log.h"

using namespace J9;

////////////////////////////////////////////////////////////////////////////////
// Wave
////////////////////////////////////////////////////////////////////////////////
Wave::Wave()
: fMin_(-1.0f),
fMax_(1.0f),
iPeriod_(1000),
iStart_(0)
{
}

Wave::~Wave()
{
}

F32
Wave::Get(U32 iTime)
{
	F32	fTime = GetTimeInPeriod(iTime);
	ASSERT(0.0f <= fTime && fTime< 1.0f);
	F32	fValue = _Get(fTime);
	ASSERT(-1.0f <= fTime && fTime<= 1.0f);

	return Map<F32>(-1.0f, 1.0f, GetMin(), GetMax(), fValue);
}

F32
Wave::GetTimeInPeriod(U32 iTime) const
{
	// total time from start
	U32	i = iTime - iStart_;
	// time in cur period
	i %= iPeriod_;
	// fit it in [0.0f~1.0f)
	return _sc<F32>(i) / _sc<F32>(iPeriod_);
}

void
Wave::TestDump()
{
	SetMin(0.0f);
	SetMax(1.0f);
	SetPeriod(1000);
	SetStart(0);

	for (U32 iTime = 0; iTime <= 2000; ++iTime)
	{
		LOG(_W("%d\t%f\r\n"), iTime, Get(iTime));
	}
}

////////////////////////////////////////////////////////////////////////////////
// Wave_Sine
////////////////////////////////////////////////////////////////////////////////
F32
Wave_Sine::_Get(F32 fTime)
{
	fTime *= 2.0f * _sc<F32>(F32_PI);
	return ::sinf(fTime);
}

////////////////////////////////////////////////////////////////////////////////
// Wave_Cosine
////////////////////////////////////////////////////////////////////////////////
F32
Wave_Cosine::_Get(F32 fTime)
{
	fTime *= 2.0f * _sc<F32>(F32_PI);
	return ::cosf(fTime);
}

////////////////////////////////////////////////////////////////////////////////
// Wave_Square
////////////////////////////////////////////////////////////////////////////////
F32
Wave_Square::_Get(F32 fTime)
{
	if (fTime < 0.5f)
		return -1.0f;
	else
		return 1.0f;
}

////////////////////////////////////////////////////////////////////////////////
// Wave_Ramp
////////////////////////////////////////////////////////////////////////////////
F32
Wave_Ramp::_Get(F32 fTime)
{
	return -1.0f + (2.0f * fTime);
}

////////////////////////////////////////////////////////////////////////////////
// Wave_Sawtooth
////////////////////////////////////////////////////////////////////////////////
F32
Wave_Sawtooth::_Get(F32 fTime)
{
	return 1.0f - (2.0f * fTime);
}

////////////////////////////////////////////////////////////////////////////////
// Wave_Triangular
////////////////////////////////////////////////////////////////////////////////
F32
Wave_Triangular::_Get(F32 fTime)
{
	if (fTime < 0.5f)
		return -1.0f + (4.0f * fTime);
	else
		return 3.0f - (4.0f * fTime);
}

////////////////////////////////////////////////////////////////////////////////
// Wave_Circular
////////////////////////////////////////////////////////////////////////////////
F32
Wave_Circular::_Get(F32 fTime)
{
	if (fTime < 0.5f)
		return SqrtF(-16.0f * fTime * fTime + 8.0f * fTime);
	else
		return -SqrtF(-16.0f * fTime * fTime + 24.0f * fTime - 8.0f);
}

